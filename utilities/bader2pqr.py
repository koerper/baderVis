# -*- coding:utf-8 -*-

"""
@author: Jin-Cheng Liu, Nxu
@file: bader2pqr
@time: 2018/11/22 20:57
A script to transfer bader output to pgr file for VMD visualization.
"""

import os
from subprocess import Popen,PIPE

inputACF = "ACF.dat"
inputCONTCAR = "CONTCAR"

paths=os.path.realpath(__file__)
dir_path = os.path.dirname(os.path.realpath(__file__))
get_lattice= os.path.join(dir_path,'get_lattice.exe')
p2 = Popen('chmod u+x {0} && {0}' .format(get_lattice),shell=True,stdout=PIPE)
p2.wait()   
 
valenceEle = os.popen("grep ZVAL ./POTCAR").readlines()
valenceEle = list([x.strip().split(' ') for x in valenceEle])
for i in range(len(valenceEle)):
    while '' in valenceEle[i]:
        valenceEle[i].remove('')
    valenceEle[i] = valenceEle[i][5] 
#print(valenceEle)

atomicRadius = os.popen("grep RWIGS ./POTCAR").readlines()
atomicRadius = list([x.strip().split(' ') for x in atomicRadius]) 
for i in range(len(valenceEle)):
    while '' in atomicRadius[i]:
        atomicRadius[i].remove('')
    atomicRadius[i] = atomicRadius[i][5]
#print(atomicRadius)


Inp = open(inputACF, "r")
ACFlines = []
Con = open(inputCONTCAR, "r")
CONTCAR = []

for line in Inp.readlines():
    line = line.strip().split(' ')
    while '' in line:
        line.remove('')
    ACFlines.append(line)

for line in Con.readlines():
    line = line.strip().split(' ')
    while '' in line:
        line.remove('')
    CONTCAR.append(line)
atomType = CONTCAR[5]
atomNum = sum([float(x) for x in CONTCAR[6]])
CONTCAR[5] = [str.upper(x) for x in CONTCAR[5]]
xyz = CONTCAR[8:8+int(atomNum)]

#print(valenceEle,atomicRadius)
ACFlines = ACFlines[2:-4]

output = ["Generated by vaspkit",]
count = 0
for type in range(len(CONTCAR[6])):
    for atom in range(int(CONTCAR[6][type])):
        output.append("{s:>5}".format(s="HETATM") + "{s:>5}".format(s=ACFlines[count][0])  \
                      + "{s:>3}".format(s=CONTCAR[5][type]) +\
                      "{s:>6}".format(s="MOL") + "{s:>2}".format(s="A") + "{s:>4}".format(s="1") +\
                      "{0:12.3f}".format(float(ACFlines[count][1])) + \
                      "{0:8.3f}".format(float(ACFlines[count][2])) + \
                      "{0:8.3f}".format(float(ACFlines[count][3])) + \
                      "{0:13.8f}".format(float(ACFlines[count][4])-float(valenceEle[type])) \
                      + "{0:9.4f}".format(float(atomicRadius[type])) + "{s:>6}".format(s=CONTCAR[5][type]))
        count += 1
output.append("END\n")
#print(output)
list2str = '\n'.join(output)
open('bader.pqr', 'w').write(list2str)
